name: SIT Backup MySQL Database

on:
  workflow_dispatch:
    inputs:
      # version:
      #   description: 'Repo Tag Name (Ex.: yyyymmdd-hhmmss)'
      #   type: string
      #   required: true
      # environment:
      #   description: 'uat/sit'
      #   type: string
      #   required: true
      name:
        description: 'short name'
        type: string
        required: true
      email:
        description: 'example@regovtech.com'
        type: string
        required: true

jobs:

  Send-Email-Devops:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Print Triggered Workflow Link
        run: |
          WORKFLOW_LINK="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "WORKFLOW_LINK=$WORKFLOW_LINK" >> $GITHUB_ENV
          echo "your $WORKFLOW_LINK"
          
      - name: Send Triggered Notification to DevOps
        env:
          SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
          RECEIVER_EMAIL: ${{ secrets.RECEIVER_EMAIL }} 
          #devops email
          RECEIVER_EMAIL_TWO: ${{ secrets.RECEIVER_EMAIL_TWO }} 
          #devops email
          REQUESTED_USER: ${{ github.event.inputs.name }}
          PASSWORD_EMAIL: ${{ secrets.PASSWORD_EMAIL }}
          ENV: "SIT"
        run: |
          python -m pip install --upgrade pip
          pip install pipenv 
          pipenv install
          pwd
          pipenv run python src/send-email.py
          
  SIT-backup:
    runs-on: ubuntu-latest
    environment:
      name: try

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create SITDB Database Dump
        env:
          SIT_DB_USER: ${{ secrets.SIT_DB_USER }}
          SIT_DB_PASSWORD: ${{ secrets.SIT_DB_PASSWORD }} 
          SIT_DB_HOST: ${{ secrets.SIT_DB_HOST }} 
          SIT_DB_NAME: ${{ secrets.SIT_DB_NAME }}
        run: |
          TIMESTAMP=$(date +"%Y%m%d%H%M%S")
          SIT_LOCAL_DUMP_FILE="dump-127.0.0.1-sit-${TIMESTAMP}.sql"
          mysqldump -h $SIT_DB_HOST -u $SIT_DB_USER -p$SIT_DB_PASSWORD $SIT_DB_NAME > $SIT_LOCAL_DUMP_FILE
          echo "SIT_LOCAL_DUMP_FILE=$SIT_LOCAL_DUMP_FILE" >> $GITHUB_ENV
      
      - name: Create DEXSIT DB Database Dump
        env:
          DEX_SIT_DB_USER: ${{ secrets.DEX_SIT_DB_USER }}
          DEX_SIT_DB_PASSWORD: ${{ secrets.DEX_SIT_DB_PASSWORD }} 
          DEX_SIT_DB_HOST: ${{ secrets.DEX_SIT_DB_HOST }} 
          DEX_SIT_DB_NAME: ${{ secrets.DEX_SIT_DB_NAME }}
        run: |
          TIMESTAMP=$(date +"%Y%m%d%H%M%S")
          DEXSIT_LOCAL_DUMP_FILE="dump-127.0.0.1-dexsit-${TIMESTAMP}.sql"
          mysqldump -h $DEX_SIT_DB_HOST -u $DEX_SIT_DB_USER -p$DEX_SIT_DB_PASSWORD $DEX_SIT_DB_NAME > $DEXSIT_LOCAL_DUMP_FILE
          echo "DEXSIT_LOCAL_DUMP_FILE=$DEXSIT_LOCAL_DUMP_FILE" >> $GITHUB_ENV
      
      - name: Check Both SIT DB
        run: |
          echo ${{ env.DEXSIT_LOCAL_DUMP_FILE }}
          echo ${{ env.SIT_LOCAL_DUMP_FILE }}

      - name: Compressing The Dumps
        run: |
          TIMESTAMP=$(date +"%Y%m%d%H%M%S")
          ZIP_FILE="dumps-sit-${TIMESTAMP}.zip"
          zip -r $ZIP_FILE $SIT_LOCAL_DUMP_FILE $DEXSIT_LOCAL_DUMP_FILE
          echo "ZIP_FILE=$ZIP_FILE" >> $GITHUB_ENV

      - name: Check ZIP FILE
        run: |
          echo ${{ env.ZIP_FILE }}

      - name: Create Backup File Artifacts
        id: 'create_artifacts'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ZIP_FILE }}
          path: ${{ env.ZIP_FILE }}

      - name: Upload Backup to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SIT_BUCKET_NAME: ${{ secrets.SIT_BUCKET }}
        run: |
          aws s3 cp ${{ env.ZIP_FILE }} $SIT_BUCKET_NAME
          S3_URI="$SIT_BUCKET_NAME$ZIP_FILE"
          echo "S3_URI=$S3_URI" >> $GITHUB_ENV
          echo "Uploaded backup to S3: $S3_URI"
          
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
          
      - name: Send Email S3
        env:
          SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
          RECEIVER_EMAIL: ${{ github.event.inputs.email }}
          PASSWORD_EMAIL: ${{ secrets.PASSWORD_EMAIL }}
          S3_URI: ${{ env.S3_URI }}
          ENV: "SIT"
        run: |
          python -m pip install --upgrade pip
          pip install pipenv 
          pipenv install
          pwd
          pipenv run python src/send-bucket.py
