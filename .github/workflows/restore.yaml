name: Backup and Restore MySQL Database

on:

  workflow_dispatch:
    inputs:
      # version:
      #   description: 'Repo Tag Name (Ex.: yyyymmdd-hhmmss)'
      #   type: string
      #   required: true
      environment:
        description: 'dexsit/dexuat/uat/sit'
        type: string
        required: true

jobs:

  DEXSIT-backup-restore:
    if: inputs.environment == 'dexsit'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Create MySQL Database Dump
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }} 
          DB_HOST: ${{ secrets.DB_HOST }} 
          DB_NAME: test-db
        run: |
          TIMESTAMP=$(date +"%Y%m%d%H%M%S")
          LOCAL_DUMP_FILE="dump-${{ inputs.environment }}-${TIMESTAMP}.sql"
          mysqldump -h $DB_HOST -u $DB_USER -p$DB_PASSWORD $DB_NAME > $LOCAL_DUMP_FILE
          echo "LOCAL_DUMP_FILE=$LOCAL_DUMP_FILE" >> $GITHUB_ENV
      
      - name: 1st Check
        run: |
          echo ${{ env.LOCAL_DUMP_FILE }}

      - name: Create Backup File Artifacts
        id: 'create_artifacts_backup'
        uses: actions/upload-artifact@v3
        with:
          name: backup-${{ env.LOCAL_DUMP_FILE }}
          path: ${{ env.LOCAL_DUMP_FILE }}

      - name: Upload Backup to AWS S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          BUCKET_NAME: s3://bucket-test-777/backup-db/
        run: |
          aws s3 cp ${{ env.LOCAL_DUMP_FILE }} $BUCKET_NAME

      - name: Download Developer SQL File from AWS S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          BUCKET_NAME: bucket-test-777
        run: |
          latest_version_key=$(aws s3api list-object-versions --bucket $BUCKET_NAME --prefix restore-db | jq -r '.Versions | sort_by(.LastModified) | last | .Key')
          aws s3 cp s3://$BUCKET_NAME/$latest_version_key .
          file_name=$(basename "$latest_version_key") 
          echo "file_name=$file_name" >> $GITHUB_ENV

      - name: 2nd Check
        run: |
          echo ${{ env.file_name }}

      - name: Create Restore File Artifacts
        id: 'create_artifacts_restore'
        uses: actions/upload-artifact@v3
        with:
          name: restore-${{ env.file_name }}
          path: ./${{ env.file_name }}

      - name: Restore MySQL Database
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }} 
          DB_HOST: ${{ secrets.DB_HOST }} 
          DB_NAME: test-db
          LOCAL_DUMP_FILE: ${{ env.file_name }}
        run: |
          mysql -h $DB_HOST -u $DB_USER -p$DB_PASSWORD $DB_NAME < $LOCAL_DUMP_FILE
