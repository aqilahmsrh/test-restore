name: Backup MySQL Database

on:

  workflow_dispatch:
    inputs:
      # version:
      #   description: 'Repo Tag Name (Ex.: yyyymmdd-hhmmss)'
      #   type: string
      #   required: true
      environment:
        description: 'dexsit/dexuat/uat/sit'
        type: string
        required: true

jobs:
  DEXSIT-backup:
    if: inputs.environment == 'sit'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create MySQL Database Dump
        env:
          SIT_DB_USER: ${{ secrets.SIT_DB_USER }}
          SIT_DB_PASSWORD: ${{ secrets.SIT_DB_PASSWORD }} 
          SIT_DB_HOST: ${{ secrets.SIT_DB_HOST }} 
          SIT_DB_NAME: ${{ secrets.SIT_DB_NAME }}
        run: |
          TIMESTAMP=$(date +"%Y%m%d%H%M%S")
          SIT_LOCAL_DUMP_FILE="dump-127.0.0.1-sit-${TIMESTAMP}.sql"
          mysqldump -h $SIT_DB_HOST -u $SIT_DB_USER -p$SIT_DB_PASSWORD $SIT_DB_NAME > $SIT_LOCAL_DUMP_FILE
          echo "SIT_LOCAL_DUMP_FILE=$SIT_LOCAL_DUMP_FILE" >> $GITHUB_ENV
      
      - name: Check
        run: |
          echo ${{ env.LOCAL_DUMP_FILE }}
      
      - name: Create MySQL Database Dump
        env:
          DEX_SIT_DB_USER: ${{ secrets.DEX_SIT_DB_USER }}
          DEX_SIT_DB_PASSWORD: ${{ secrets.DEX_SIT_DB_PASSWORD }} 
          DEX_SIT_DB_HOST: ${{ secrets.DEX_SIT_DB_HOST }} 
          DEX_SIT_DB_NAME: ${{ secrets.DEX_SIT_DB_NAME }}
        run: |
          TIMESTAMP=$(date +"%Y%m%d%H%M%S")
          DEXSIT_LOCAL_DUMP_FILE="dump-127.0.0.1-dexsit-${TIMESTAMP}.sql"
          mysqldump -h $DEX_SIT_DB_HOST -u $DEX_SIT_DB_USER -p$DEX_SIT_DB_PASSWORD $DEX_SIT_DB_NAME > $DEXSIT_LOCAL_DUMP_FILE
          echo "DEXSIT_LOCAL_DUMP_FILE=$DEXSIT_LOCAL_DUMP_FILE" >> $GITHUB_ENV
      
      - name: Check
        run: |
          echo ${{ env.DEXSIT_LOCAL_DUMP_FILE }}
          echo ${{ env.SIT_LOCAL_DUMP_FILE }}

      - name: Zip compress dumps
        run: |
          TIMESTAMP=$(date +"%Y%m%d%H%M%S")
          ZIP_FILE="dumps-sit-${TIMESTAMP}.zip"
          zip -r $ZIP_FILE $SIT_LOCAL_DUMP_FILE $DEXSIT_LOCAL_DUMP_FILE
          echo "ZIP_FILE=$ZIP_FILE" >> $GITHUB_ENV

      - name: Check
        run: |
          echo ${{ env.ZIP_FILE }}

      - name: Create Backup File Artifacts
        id: 'create_artifacts'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ZIP_FILE }}
          path: ${{ env.ZIP_FILE }}

      - name: Upload Backup to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SIT_BUCKET_NAME: ${{ secrets.SIT_BUCKET }}
        run: |
          aws s3 cp ${{ env.ZIP_FILE }} $SIT_BUCKET_NAME
